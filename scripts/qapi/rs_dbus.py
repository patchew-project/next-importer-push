"""
QAPI Rust DBus interface generator
"""

from qapi.common import *
from qapi.rs import QAPISchemaRsVisitor, rs_systype, from_qemu, build_params, rs_type, gen_call


class QAPISchemaGenRsDBusVisitor(QAPISchemaRsVisitor):

    def __init__(self, prefix):
        super().__init__(prefix, 'qapi-dbus')
        self._cur_doc = None
        self._dbus_gen = ''

    def visit_begin(self, schema):
        self.schema = schema
        self._gen.add(
            mcgen('''
// generated by qapi-gen, DO NOT EDIT

extern "C" {
'''))

    def visit_end(self):
        self._gen.add(mcgen('''
}

pub(crate) struct %(name)s;

#[dbus_interface(name = "org.qemu.%(name)s")]
impl %(name)s {
%(dbus)s
}
''', name=to_camel_case(self._prefix + 'Qapi'), dbus=self._dbus_gen))

    def visit_command(self, name, info, ifcond, features,
                      arg_type, ret_type, gen, success_response, boxed,
                      allow_oob, allow_preconfig):
        if not gen:
            return

        ret = ''
        retval = '()'
        if ret_type:
            ret = ' -> %s' % rs_systype(ret_type.c_type())
            retval = from_qemu('retval_', ret_type.c_type(), full=True)

        doc = ''
        for s in self.schema.docs:
            if s.symbol == name:
                for l in s.text.splitlines():
                    doc += '///%s\n' % l[1:]
                if doc.endswith('\n'):
                    doc = doc[:-1]

        self._gen.add(mcgen('''
    fn qmp_%(name)s(%(params)s)%(ret)s;
''', name = c_name(name), params=build_params(arg_type, boxed, extra=['errp: *mut *mut qemu_sys::Error']), ret=ret))

        ret = ' -> Result<()>'
        if ret_type:
            ret = ' -> Result<%s>' % rs_type(ret_type.c_type())

        self._dbus_gen += mcgen('''
    %(doc)s
    fn %(name)s(&self, %(params)s)%(ret)s {
        unsafe {
            let mut err_ = ptr::null_mut();
            %(call)s
            if err_.is_null() {
                Ok(%(retval)s)
            } else {
                Err(from_qemu_full(err_))
            }
        }
    }

''', doc = doc, call = gen_call(name, arg_type, boxed, ret_type),
     name = c_name(name), params=build_params(arg_type, boxed, typefn=rs_type), ret=ret, retval=retval)


def gen_rs_dbus(schema, output_dir, prefix):
    vis = QAPISchemaGenRsDBusVisitor(prefix)
    schema.visit(vis)
    vis.write(output_dir)
