#!/usr/bin/env python3
#
# Test block-dirty-bitmap-populate
#
# Copyright (c) 2020 John Snow for Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# owner=jsnow@redhat.com

from collections import namedtuple
import itertools
import math
import os

import iotests
from iotests import log, qemu_img
from bitmaps import EmulatedBitmap, GROUPS

SIZE = 64 * 1024 * 1024
GRANULARITY = 64 * 1024


class Drive:
    def __init__(self, path, vm):
        self.path = path
        self.vm = vm
        self.fmt = None
        self.size = None
        self.node = None

    def img_create(self, fmt, size):
        self.fmt = fmt
        self.size = size
        iotests.qemu_img_create('-f', self.fmt, self.path, str(self.size))


def block_dirty_bitmap_populate(vm, node, bitmap, job_id, pattern, **kwargs):
    # Strip any arguments explicitly nulled by the caller:
    kwargs = {key: val for key, val in kwargs.items() if val is not None}
    result = vm.qmp_log('block-dirty-bitmap-populate',
                        node=node,
                        name=bitmap,
                        job_id=job_id,
                        pattern=pattern,
                        **kwargs)
    return result


def populate(drive, bitmap, job_id, pattern='allocation-top', **kwargs):
    kwargs.setdefault('pattern', pattern)
    kwargs.setdefault('auto-finalize', False)
    kwargs.setdefault('auto-dismiss', False)
    ret = block_dirty_bitmap_populate(drive.vm, drive.node,
                                      bitmap, job_id, **kwargs)
    return {
        'id': job_id,
        'auto-finalize': kwargs['auto-finalize'],
        'auto-dismiss': kwargs['auto-dismiss'],
        'return': ret,
    }


def perform_writes(drive, n, filter_node_name=None):
    log("-- Write #{:d}:".format(n))
    node_name = filter_node_name or drive.node
    for pattern in GROUPS[n].patterns:
        cmd = "write -P{:s} 0x{:07x} 0x{:x}".format(
            pattern.byte,
            pattern.offset,
            pattern.size)
        drive.vm.hmp_qemu_io(node_name, cmd, use_log=True)
    log('')


TestConfig = namedtuple('TestConfig', [
    'base_pattern',
    'disabled',
    'pre_writes',
    'mid_writes',
    'cancel',
    'post_writes',
])


def test_bitmap_populate(config):
    """
    Test bitmap populate.

    :param base_pattern: Write a base pattern?
    :param disabled:     Disable the target bitmap?
    :param pre_writes:   Write a pattern after bitmap creation, but before job?
    :param mid_writes:   Write a pattern before job finalizes?
    :param cancel:       Cancel the job instead of finalizing it?
    :param post_writes:  Write a pattern after the job?
    """
    with iotests.FilePaths(['img']) as (img_path,), iotests.VM() as vm:
        log("\n=== Bitmap Populate {:s} ===\n".format(str(config)))

        log('-- Prepare image & VM:')
        drive0 = Drive(img_path, vm=vm)
        drive0.img_create(iotests.imgfmt, SIZE)
        vm.add_device("{},id=scsi0".format(iotests.get_virtio_scsi_device()))
        vm.launch()

        file_config = {
            'driver': 'file',
            'filename': drive0.path
        }

        drive0.node = 'drive0'
        vm.qmp_log('blockdev-add',
                   filters=[iotests.filter_qmp_testfiles],
                   node_name=drive0.node,
                   driver=drive0.fmt,
                   file=file_config)
        log('')


        # Step 0: Prepare & Base Allocation Pattern

        if config.base_pattern:
            perform_writes(drive0, 0)


        # Step 1: Add test bitmap

        log('-- Add Bitmap:')
        vm.qmp_log('block-dirty-bitmap-add',
                   node=drive0.node,
                   name="target",
                   granularity=GRANULARITY,
                   disabled=config.disabled)
        ebitmap = EmulatedBitmap()
        log('')

        # Step 2: Pre-Writes

        if config.pre_writes:
            perform_writes(drive0, 1)
            if not config.disabled:
                ebitmap.dirty_group(1)
            bitmap = vm.get_bitmap(drive0.node, 'target')
            ebitmap.compare(bitmap)


        # Step 3: Launch job & Mid-Writes

        log('-- Test block-dirty-bitmap-populate (bitpop0):')
        def pre_finalize():
            # Writes issued prior to job finalization:
            if config.mid_writes:
                perform_writes(drive0, 2)
                if not config.disabled:
                    ebitmap.dirty_group(2)

        job = populate(drive0, 'target', 'bitpop0')
        assert job['return'] == {'return': {}}
        vm.run_job(job['id'], auto_dismiss=job['auto-dismiss'],
                   auto_finalize=job['auto-finalize'],
                   pre_finalize=pre_finalize,
                   cancel=config.cancel)
        log('')


        # Step 4: Post-job verification

        if not config.cancel:
            # Any writes made prior to the job finishing should now be visible.
            if config.base_pattern:
                ebitmap.dirty_group(0)
            if config.pre_writes:
                ebitmap.dirty_group(1)
            if config.mid_writes:
                ebitmap.dirty_group(2)

        bitmap = vm.get_bitmap(drive0.node, 'target')
        ebitmap.compare(bitmap)


        # Step 5: Post-Writes

        if config.post_writes:
            perform_writes(drive0, 3)
            if not config.disabled:
                ebitmap.dirty_group(3)


        # Step 6: Final Verification

        log('-- Verification:')
        bitmaps = vm.query_bitmaps()
        log({'bitmaps': bitmaps}, indent=2)
        log('')
        bitmap = vm.get_bitmap(drive0.node, 'target', bitmaps=bitmaps)
        ebitmap.compare(bitmap)


        log('-- Cleanup:')
        vm.qmp_log("block-dirty-bitmap-remove",
                   node=drive0.node, name="target")

        bitmaps = vm.query_bitmaps()
        if bitmaps:
            log("ERROR: bitmaps unaccounted for:")
            log(bitmaps)
        else:
            log('OK: All bitmaps removed')
        vm.shutdown()
        log('')


def main():
    for args in itertools.product((True, False), repeat=6):
        cfg = TestConfig(*args)
        test_bitmap_populate(cfg)


if __name__ == '__main__':
    iotests.script_main(main, supported_fmts=['qcow2'],
                        supported_protocols=['file'])
