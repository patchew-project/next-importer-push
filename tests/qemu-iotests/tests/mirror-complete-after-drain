#!/usr/bin/env python3
# group: rw
#
# Tests for block-job-complete immediately after a drain
#
# Copyright (c) 2021 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import iotests

iotests.script_initialize(supported_fmts=['raw'])

DISK_JOBS = 4
NULL_JOBS = 1


# We cannot auto-generate these in a loop because the files are
# deleted when their scope ends
src_imgs = iotests.file_path('src0', 'src1', 'src2', 'src3')
dst_imgs = iotests.file_path('dst0', 'dst1', 'dst2', 'dst3')

assert len(src_imgs) == DISK_JOBS
assert len(dst_imgs) == DISK_JOBS


for i in range(DISK_JOBS):
    ret = iotests.qemu_img('create', '-f', iotests.imgfmt, src_imgs[i], '128M')
    assert ret == 0

    ret = iotests.qemu_img('create', '-f', iotests.imgfmt, dst_imgs[i], '128M')
    assert ret == 0

with iotests.VM() as vm:
    vm.add_object('iothread,id=iothr0')
    vm.add_device('virtio-scsi,iothread=iothr0')

    for i in range(DISK_JOBS):
        vm.add_blockdev(f'file,node-name=source-disk-{i},'
                        f'filename={src_imgs[i]}')

        vm.add_blockdev(f'file,node-name=target-disk-{i},'
                        f'filename={dst_imgs[i]}')

        vm.add_device(f'scsi-hd,id=device-disk-{i},drive=source-disk-{i}')

    for i in range(NULL_JOBS):
        vm.add_blockdev(f'null-co,node-name=source-null-{i},read-zeroes=on')
        vm.add_blockdev(f'null-co,node-name=target-null-{i},read-zeroes=on')
        vm.add_device(f'scsi-hd,id=device-null-{i},drive=source-null-{i}')

    vm.launch()

    for i in range(DISK_JOBS):
        vm.qmp_log('blockdev-mirror',
                   job_id=f'mirror-disk-{i}',
                   device=f'source-disk-{i}',
                   target=f'target-disk-{i}',
                   sync='full',
                   granularity=1048576,
                   buf_size=(16 * 1048576))

    for i in range(NULL_JOBS):
        vm.qmp_log('blockdev-mirror',
                   job_id=f'mirror-null-{i}',
                   device=f'source-null-{i}',
                   target=f'target-null-{i}',
                   sync='full')

    for i in range(DISK_JOBS + NULL_JOBS):
        vm.event_wait('BLOCK_JOB_READY')

    for i in range(DISK_JOBS):
        vm.hmp(f'qemu-io -d device-disk-{i} "write 0 128M"')

    vm.qmp_log('transaction', actions=[])
    vm.qmp_log('block-job-complete', device='mirror-null-0')
