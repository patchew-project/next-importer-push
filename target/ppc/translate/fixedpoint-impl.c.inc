/*
 * Power ISA decode for Fixed-Point Facility instructions
 *
 * Copyright (c) 2021 Luis Pires <luis.pires@eldorado.org.br>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Incorporate CIA into the constant when R=1.
 * Validate that when R=1, RA=0.
 */
static bool resolve_PLS_D(DisasContext *ctx, arg_PLS_D *a)
{
    if (a->r) {
        if (unlikely(a->ra != 0)) {
            gen_invalid(ctx);
            return false;
        }
        a->si += ctx->cia;
    }
    return true;
}

/*
 * Fixed-Point Load/Store Instructions
 */

static bool do_ldst_PLS_D(DisasContext *ctx, arg_PLS_D *a, bool update,
                          bool store, MemOp mop)
{
    TCGv ea;

    if (!resolve_PLS_D(ctx, a)) {
        return true;
    }
    if (update && (a->ra == 0 || (!store && a->ra == a->rt))) {
        gen_invalid(ctx);
        return true;
    }
    gen_set_access_type(ctx, ACCESS_INT);

    ea = tcg_temp_new();
    if (a->ra) {
        tcg_gen_addi_tl(ea, cpu_gpr[a->ra], a->si);
    } else {
        tcg_gen_movi_tl(ea, a->si);
    }
    if (NARROW_MODE(ctx)) {
        tcg_gen_ext32u_tl(ea, ea);
    }
    mop ^= ctx->default_tcg_memop_mask;
    if (store) {
        tcg_gen_qemu_st_tl(cpu_gpr[a->rt], ea, ctx->mem_idx, mop);
    } else {
        tcg_gen_qemu_ld_tl(cpu_gpr[a->rt], ea, ctx->mem_idx, mop);
    }
    if (update) {
        tcg_gen_mov_tl(cpu_gpr[a->ra], ea);
    }
    tcg_temp_free(ea);

    return true;
}

static bool do_ldst_X(DisasContext *ctx, arg_X *a, bool update,
                      bool store, MemOp mop)
{
    TCGv ea;

    if (update && (a->ra == 0 || (!store && a->ra == a->rt))) {
        gen_invalid(ctx);
        return true;
    }
    gen_set_access_type(ctx, ACCESS_INT);

    ea = tcg_temp_new();
    if (a->ra) {
        tcg_gen_add_tl(ea, cpu_gpr[a->ra], cpu_gpr[a->rb]);
    } else {
        tcg_gen_mov_tl(ea, cpu_gpr[a->rb]);
    }
    if (NARROW_MODE(ctx)) {
        tcg_gen_ext32u_tl(ea, ea);
    }
    mop ^= ctx->default_tcg_memop_mask;
    if (store) {
        tcg_gen_qemu_st_tl(cpu_gpr[a->rt], ea, ctx->mem_idx, mop);
    } else {
        tcg_gen_qemu_ld_tl(cpu_gpr[a->rt], ea, ctx->mem_idx, mop);
    }
    if (update) {
        tcg_gen_mov_tl(cpu_gpr[a->ra], ea);
    }
    tcg_temp_free(ea);

    return true;
}

/* Load Byte and Zero */
TRANS(LBZ, do_ldst_PLS_D, false, false, MO_UB)
TRANS(LBZX, do_ldst_X, false, false, MO_UB)
TRANS(LBZU, do_ldst_PLS_D, true, false, MO_UB)
TRANS(LBZUX, do_ldst_X, true, false, MO_UB)

/* Load Halfword and Zero */
TRANS(LHZ, do_ldst_PLS_D, false, false, MO_UW)
TRANS(LHZX, do_ldst_X, false, false, MO_UW)
TRANS(LHZU, do_ldst_PLS_D, true, false, MO_UW)
TRANS(LHZUX, do_ldst_X, true, false, MO_UW)

/* Load Halfword Algebraic */
TRANS(LHA, do_ldst_PLS_D, false, false, MO_SW)
TRANS(LHAX, do_ldst_X, false, false, MO_SW)
TRANS(LHAU, do_ldst_PLS_D, true, false, MO_SW)
TRANS(LHAXU, do_ldst_X, true, false, MO_SW)

/* Load Word and Zero */
TRANS(LWZ, do_ldst_PLS_D, false, false, MO_UL)
TRANS(LWZX, do_ldst_X, false, false, MO_UL)
TRANS(LWZU, do_ldst_PLS_D, true, false, MO_UL)
TRANS(LWZUX, do_ldst_X, true, false, MO_UL)

/* Load Word Algebraic */
TRANS64(LWA, do_ldst_PLS_D, false, false, MO_SL)
TRANS64(LWAX, do_ldst_X, false, false, MO_SL)
TRANS64(LWAUX, do_ldst_X, true, false, MO_SL)

/* Load Doubleword */
TRANS64(LD, do_ldst_PLS_D, false, false, MO_Q)
TRANS64(LDX, do_ldst_X, false, false, MO_Q)
TRANS64(LDU, do_ldst_PLS_D, true, false, MO_Q)
TRANS64(LDUX, do_ldst_X, true, false, MO_Q)

/* Store Byte */
TRANS(STB, do_ldst_PLS_D, false, true, MO_UB)
TRANS(STBX, do_ldst_X, false, true, MO_UB)
TRANS(STBU, do_ldst_PLS_D, true, true, MO_UB)
TRANS(STBUX, do_ldst_X, true, true, MO_UB)

/* Store Halfword */
TRANS(STH, do_ldst_PLS_D, false, true, MO_UW)
TRANS(STHX, do_ldst_X, false, true, MO_UW)
TRANS(STHU, do_ldst_PLS_D, true, true, MO_UW)
TRANS(STHUX, do_ldst_X, true, true, MO_UW)

/* Store Word */
TRANS(STW, do_ldst_PLS_D, false, true, MO_UL)
TRANS(STWX, do_ldst_X, false, true, MO_UL)
TRANS(STWU, do_ldst_PLS_D, true, true, MO_UL)
TRANS(STWUX, do_ldst_X, true, true, MO_UL)

/* Store Doubleword */
TRANS64(STD, do_ldst_PLS_D, false, true, MO_Q)
TRANS64(STDX, do_ldst_X, false, true, MO_Q)
TRANS64(STDU, do_ldst_PLS_D, true, true, MO_Q)
TRANS64(STDUX, do_ldst_X, true, true, MO_Q)

/*
 * Fixed-Point Arithmetic Instructions
 */

static bool trans_ADDI(DisasContext *ctx, arg_PLS_D *a)
{
    if (resolve_PLS_D(ctx, a)) {
        if (a->ra) {
            tcg_gen_addi_tl(cpu_gpr[a->rt], cpu_gpr[a->ra], a->si);
        } else {
            tcg_gen_movi_tl(cpu_gpr[a->rt], a->si);
        }
    }
    return true;
}

static bool trans_ADDIS(DisasContext *ctx, arg_D *a)
{
    int si = a->si << 16;
    if (a->ra) {
        tcg_gen_addi_tl(cpu_gpr[a->rt], cpu_gpr[a->ra], si);
    } else {
        tcg_gen_movi_tl(cpu_gpr[a->rt], si);
    }
    return true;
}

static bool trans_NOP(DisasContext *ctx, arg_NOP *a)
{
    return true;
}
